# LAB | SQL Joins
use sakila;

## Challenge - Joining on multiple tables

-- 1. List the number of films per category.
select c.name as category, count(f.film_id) as num_films from category as c
join film_category as fc
on c.category_id = fc.category_id
join film as f
on fc.film_id = f.film_id
group by c.name;

-- 2. Retrieve the store ID, city, and country for each store.
select st.store_id, ci.city, co.country from store as st
join address as ad
on st.address_id = ad.address_id
join city as ci
on ad.city_id = ci.city_id
join country as co
on ci.country_id = co.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
select store.store_id, sum(pay.amount) as total_revenue from store as store
join staff as staff
on store.store_id = staff.store_id
join payment as pay
on staff.staff_id = pay.staff_id
group by store_id;

-- 4.  Determine the average running time of films for each category.
select c.name as category, round(avg(f.length), 2) as average_running_time from film as f
join film_category as fc
on f.film_id = fc.film_id
join category as c
on fc.category_id = c.category_id
group by c.name
order by average_running_time;

-- Bonus:

-- 5.  Identify the film categories with the longest average running time.
select c.name as category, round(avg(f.length), 2) as average_running_time from film as f
join film_category as fc
on f.film_id = fc.film_id
join category as c
on fc.category_id = c.category_id
group by c.name
order by average_running_time desc
limit 1;


-- 6.  Display the top 10 most frequently rented movies in descending order.
select f.title, count(r.rental_id) as rental_frequency from rental as r
join inventory as i
on r.inventory_id = i.inventory_id
join film as f
on i.film_id = f.film_id
group by f.title
order by rental_frequency desc 
limit 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
select f.title, s.store_id from film as f
join inventory as i
on f.film_id = i.film_id
join store as s
on i.store_id = s.store_id
where f.title = 'ACADEMY DINOSAUR' and s.store_id = '1';

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
	-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
    -- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."
select title, inventory_id, 
case 
when inventory_id is null then 'NOT available'
else 'Available' 
end as 'Availability' from film 
left join inventory
using (film_id);
